import Head from "next/head";
import BoardEmpty from "../components/UI/BoardEmpty";
import kanbanData from "../public/data.json";
import { useSelector, useDispatch } from "react-redux";
import { selectMenuIsVisible, toggleViewTask } from "../store/uiSlice";
import { selectCurrentBoard, setCurrentTask } from "../store/boardSlice";

export default function Home() {
  const dispatch = useDispatch();
  const menuOpen = useSelector(selectMenuIsVisible);
  const currentBoardId = useSelector(selectCurrentBoard);
  const boardData = kanbanData.boards.find(
    (board) => board.id === currentBoardId
  );
  const colorScheme = [
    "#49C4E5",
    "#8471F2",
    "#67E2AE",
    "#49C4E5",
    "#8471F2",
    "#67E2AE",
  ];

  const viewTaskHandler = (taskTitle, columnName) => {
    const columnData = boardData.columns.find(
      (column) => column.name === columnName
    );
    const taskData = columnData.tasks.find((task) => task.title === taskTitle);
    dispatch(setCurrentTask(taskData));
    dispatch(toggleViewTask());
  };

  return (
    <div
      className={`absolute h-[calc(100vh-64px)] ${
        menuOpen && `md:w-[calc(100vw-261px)] lg:w-[calc(100vw-301px)]`
      } w-screen snap-x snap-mandatory scroll-pl-4 overflow-scroll px-4 pt-6 pb-[70px] md:h-[calc(100vh-81px)] md:scroll-pl-6 md:px-6 lg:h-[calc(100vh-97px)]`}
    >
      <Head>
        <title>Kanban</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/assets/logo-mobile.svg' />
      </Head>

      {kanbanData.boards.length === 0 && <BoardEmpty />}

      <div className='flex space-x-6 '>
        {boardData.columns.map((item, i) => (
          <div key={i} className=' w-[280px] flex-none snap-start'>
            <div className='flex'>
              <div
                className={`mr-3 h-[15px] w-[15px] rounded-full bg-[#49C4E5]`}
              />

              <h4 className='uppercase'>
                {item.name} ({item.tasks.length})
              </h4>
            </div>
            <ul className='mt-6 space-y-5'>
              {item.tasks.map((task, j) => {
                var completedTasks = 0;
                task.subtasks.filter((item) => {
                  if (item.isCompleted) {
                    completedTasks++;
                  }
                });

                return (
                  <div
                    key={j}
                    className='rounded-lg bg-white px-4 py-6 shadow-md dark:bg-grey_dark'
                  >
                    <h3
                      onClick={() => {
                        viewTaskHandler(task.title, item.name);
                      }}
                      className='cursor-pointer'
                    >
                      {task.title}
                    </h3>
                    <p className='bodyM mt-2 text-grey_medium'>
                      {completedTasks} of {task.subtasks.length} subtasks
                    </p>
                  </div>
                );
              })}
            </ul>
          </div>
        ))}
        <div className='mt-[39px] h-auto w-[296px] flex-none snap-start md:w-[304px] '>
          <div className='grid h-full w-[280px] items-center rounded-md bg-[#E9EFFA] text-center dark:bg-grey_dark'>
            <h1 className='cursor-pointer text-grey_medium hover:text-purple_main'>
              + New Column
            </h1>
          </div>
        </div>
      </div>

      {/* <div className='flex space-x-6'>
          {boardData?.columns.map((item, i) => (
            <div key={i} className='w-[280px] flex-none'>
              <div className='flex'>
                <div className='bg-["#49C4E5"] mr-3 h-[15px] w-[15px] rounded-full' />

                <h4 className='uppercase'>
                  {item.name} ({item.tasks.length})
                </h4>
              </div>
              <ul className='mt-6 space-y-5'>
                {item.tasks.map((task, j) => {
                  var completedTasks = 0;
                  task.subtasks.filter((item) => {
                    if (item.isCompleted) {
                      completedTasks++;
                    }
                  });

                  return (
                    <div
                      key={j}
                      className='rounded-lg bg-white px-4 py-6 shadow-md dark:bg-grey_dark'
                    >
                      <h3
                        onClick={() => {
                          viewTaskHandler(task.title, item.name);
                        }}
                        className='cursor-pointer'
                      >
                        {task.title}
                      </h3>
                      <p className='bodyM mt-2 text-grey_medium'>
                        {completedTasks} of {task.subtasks.length} subtasks
                      </p>
                    </div>
                  );
                })}
              </ul>
            </div>
          ))}
          <div className='mt-[39px] grid h-auto w-[280px] flex-none items-center rounded-md bg-[#E9EFFA] text-center dark:bg-grey_dark'>
            <h1 className='cursor-pointer text-grey_medium hover:text-purple_main'>
              + New Column
            </h1>
          </div>
        </div> */}
    </div>
  );
}
